---
import Allergens from '@/components/Allergens.astro';
import Benefits from '@/components/Benefits.astro';
import Breadcrumbs from '@/components/Breadcrumbs.astro';
import Ingredients from '@/components/Ingredients.astro';
import NutritionalInformation from '@/components/NutritionalInformation.astro';
import RecipeStructuredData from '@/components/StructuredData/Recipe.astro';
import Layout from '@/layouts/Default.astro';

export const getStaticPaths = async () => {
  const pages = await getRecipes();

  return pages.sort((a, b) => a.id.localeCompare(b.id)).map((page) => ({
    params: {
      slug: page.id,
    },
    props: { page },
  }));
}

const { slug } = Astro.params;
const { page } = Astro.props;
const { href } = Astro.url;
const { data } = page;
const { allergens, basics, cooking_instructions, cuisine, description, image, nutritional_information, portion_sizes, prep_times, rating, title } = data;
const { per_portion } = nutritional_information;
const { for_2 } = prep_times;
const ingredientsFor2 = data.ingredients.filter(ingredient => portion_sizes?.find(p => p.portions === 2)?.ingredients_skus?.map(sku => sku.id)?.includes(ingredient.gousto_uuid));
const ingredients = ingredientsFor2.length > 0 && ingredientsFor2 || data.ingredients;
---

<Layout
  meta={{
    description: description,
    og: {
      'description': description,
      'image': `https://images.gousto.wiki/screenshots/recipes/${slug}.jpg`,
      'image:alt': title,
      'image:height': 630,
      'image:type': 'image/jpeg',
      'image:width': 1200,
      'locale': 'en_GB',
      'title': title,
      'url': href,
    },
    title: `${title}${for_2 ? ` (${for_2} mins)` : ``}`,
    twitter: {
      'card': 'summary_large_image',
    },
  }}
>
  <RecipeStructuredData slot="structured-data" {...data} />
  <Breadcrumbs
    items={[
      { label: 'Home', href: '/' },
      { label: 'Recipes', href: '/recipes/' },
      { label: title, href: `/recipes/${page.id}/` },
    ]}
  />
  <Container>
    <div class="gap-4  grid  grid-cols-1  my-4  md:gap-8  md:grid-cols-12  md:my-8">
      <div class="col-span-1  space-y-4  md:col-span-7  md:order-2  lg:col-span-6  xl:col-span-7  print:col-span-8">
        <h1 class="font-semibold  font-serif  leading-10  text-3xl  lg:leading-15  lg:text-5xl">{title}</h1>
        <p class="text-secondary-800  md:mb-8">{stripHtml(description).result}</p>
        <div class="flex  flex-wrap  items-center  space-x-4  text-sm  text-center  text-secondary-800  md:mb-8">
          {for_2 &&
            <div class="flex  items-center  space-x-2">
              <Icon class="text-primary-600" name="stopwatch" /> <span>{for_2} mins</span>
            </div>
          }
          <!-- {per_portion?.energy_kcal < targetPortionCalories &&
            <div class="flex  items-center  space-x-2">
              <Icon class="text-primary-600" name="user" />
              <span class="flex  items-center"><Icon class="size-2.5" name="chevron-left" /> {targetPortionCalories}kcal</span>
            </div>
          } -->
          {per_portion?.energy_kcal &&
            <div class="flex  items-center  space-x-2" title="Per serving">
              <Icon class="text-primary-600" name="user" />
              <span class="flex  items-center">{per_portion.energy_kcal.toLocaleString()}kcal</span>
            </div>
          }
          {cuisine &&
            <a class="flex  group  items-center  space-x-2" href={`/recipes/cuisine/${createSlug(cuisine)}/`}>
              <Icon class="text-primary-600" name="globe" /> <span class="transition  group-hover:text-primary-600  group-hover:underline">{cuisine}</span>
            </a>
           }
        </div>
        <div class="print:hidden">
          <a
            class="animate-pulse  bg-tertiary-600  flex  flex-col  font-normal  items-center  px-6  py-3  rounded-lg  text-white  transition  hover:animate-none  hover:bg-tertiary-800"
            href="/signup"
          >
            <span class="text-xl">Try Gousto now</span>
            <span class="opacity-90">Get 65% off your first box</span>
          </a>
        </div>
      </div>
      <div class="col-span-1  md:col-span-5  lg:col-span-6  xl:col-span-5  print:col-span-4">
        <div class="aspect-square  bg-secondary-100  relative  rounded-lg">
          <picture>
            <source
              srcset={`
                ${useRemoteImageUrl(image, "h=500&output=webp&w=500")},
                ${useRemoteImageUrl(image, "h=1000&output=webp&w=1000")} 2x
              `}
              type="image/webp"
            />
            <img
              alt={title}
              class="h-auto  rounded-lg  w-full"
              decoding="async"
              height={500}
              loading="lazy"
              src={useRemoteImageUrl(image, "h=500&w=500")}
              srcset={`${useRemoteImageUrl(image, "h=1000&w=1000")} 2x`}
              width={500}
            />
          </picture>
          {isValidRating(rating) &&
            <div class="absolute  bg-white/90  end-3  flex  items-center  px-3  py-2  rounded-lg  space-x-2  text-base  top-3" title={`From ${rating.count.toLocaleString()} ratings`}>
              <Icon class="text-primary-600" name="star" /> <span>{rating.average.toFixed(1)}</span>
            </div>
          }
        </div>
      </div>
    </div>
    <div class="border-b  border-secondary-100  gap-4  grid  grid-cols-1  mb-8  pb-8  md:gap-8  md:grid-cols-12  print:grid-cols-1  print:text-sm">
      <div class="col-span-1  md:col-span-5  lg:col-span-4  print:col-span-1">
        <div class="md:sticky  md:top-[34px]">
          <Ingredients basics={basics} ingredients={ingredients} portion_sizes={portion_sizes} />
          <a
            class="animate-pulse  bg-tertiary-600  hidden  flex-col  font-medium  items-center  mt-8  px-6  py-3  rounded-lg  text-white  transition  md:flex  hover:animate-none  hover:bg-tertiary-800  print:hidden"
            href="/signup"
          >
            <span class="text-xl">Try Gousto now</span>
            <span class="font-medium  opacity-90">Get 65% off your first box</span>
          </a>
        </div>
      </div>
      <div class="col-span-1  md:col-span-7  lg:col-span-8  print:col-span-1">
        <h2 class="font-semibold  font-serif  mb-2  text-3xl">Cooking instructions</h2>
        <p class="text-secondary-800  mb-8">
          Instructions for 2
            {(isPortionOffered(portion_sizes, 3) || isPortionOffered(portion_sizes, 4)) && (
              <span class="space-x-0.1">
                {isPortionOffered(portion_sizes, 3) && (
                  <span class="text-purple">[for 3]</span>
                )}
                {isPortionOffered(portion_sizes, 4) && (
                  <span class="text-danger">[for 4]</span>
                )}
              </span>
            )}
            portion recipe.
        </p>
        <div class="print:gap-x-8">
          {cooking_instructions
            .sort((a, b) => a.order - b.order)
            .map(({ image, instruction, order }, i) => (
              <div class="flex  -mt-8  pt-8  relative  space-x-8" id={`step-${order}`}>
                <div class="flex  flex-col  items-center">
                  <div class="bg-primary-600  flex  items-center  justify-center  font-serif  rounded-full  size-12  text-white">
                    {order}.
                  </div>
                  {(i < (cooking_instructions.length - 1)) && (
                    <div class="bg-primary-600  flex-1  w-px"></div>
                  )}
                </div>
                <div class={`${(i < (cooking_instructions.length - 1)) ? `border-b  border-secondary-100  mb-8  pb-8  ` : ``}space-x-8  w-full  lg:flex  print:flex`}>
                  <div
                    class={`max-w-none  ${image ? `mb-8  ` : ``}prose  w-full  lg:mb-0  print:prose-sm`}
                    set:html={instruction}
                  />
                  {image &&
                    <div class="w-full  lg:w-1/3  print:w-1/4">
                      <picture>
                        <source
                          srcset={`
                            ${useRemoteImageUrl(image, "h=225&output=webp&w=300")},
                            ${useRemoteImageUrl(image, "h=450&output=webp&w=600")} 2x
                          `}
                          type="image/webp"
                        />
                        <img
                          alt={`Step ${order}`}
                          class="rounded-lg  w-full"
                          decoding="async"
                          height={225}
                          loading="lazy"
                          src={useRemoteImageUrl(image, "h=225&w=300")}
                          srcset={`${useRemoteImageUrl(image, "h=450&w=600")} 2x`}
                          width={300}
                        />
                      </picture>

                    </div>
                  }
                </div>
              </div>
            )
          )}
        </div>
      </div>
    </div>
    <NutritionalInformation perPortion={per_portion} />
    <Allergens allergens={allergens} />
  </Container>
  <Benefits />
</Layout>
