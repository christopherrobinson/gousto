---
import Benefits from '@/components/Benefits.astro';
import BlogPostCard from '@/components/BlogPostCard.astro';
import Hero from '@/components/Hero.astro';
import Layout from '@/layouts/Default.astro';

const categories = await getCategories();
const cuisines = await getCuisines();
const recipes = await getRecipes();
const featuredRecipes = await getRecipes({ limit: 8, randomise: true, rating: 4 });
const meta = {
  title: `${recipes.length.toLocaleString()} Delicious Gousto Recipes - Search by Cuisine & Prep Time`,
  description: `Explore over 6,000 Gousto recipes by cuisine, prep time, or ingredients. Discover easy, delicious meals and find your next favourite recipe in seconds.`,
};
const blogPosts = await getBlogPosts({ limit: 3 });
---

<Layout
  meta={{
    description: meta.description,
    og: {
      'description': meta.description,
      'image': `https://images.gousto.wiki/screenshots/gousto-recipe-search.jpg`,
      'image:alt': meta.title,
      'image:height': 630,
      'image:type': 'image/jpeg',
      'image:width': 1200,
      'locale': 'en_GB',
      'title': meta.title,
      'url': site.url,
    },
    title: meta.title,
    twitter: {
      'card': 'summary_large_image',
    },
  }}
>
  <Hero featuredRecipes={featuredRecipes} recipeCount={recipes.length} />
  <div class="bg-primary-600  text-white">
    <Container>
      <section class="justify-center  items-center  py-8  space-y-4  sm:gap-8  sm:grid  sm:grid-cols-2  sm:space-y-0  md:gap-16  md:py-16">
        <h2 class="font-normal  font-serif  text-center  md:text-2xl  lg:leading-16">Already know what you want to cook?</h2>
        <form action="/search/" class="flex-1  w-full" id="searchForm" method="get">
          <label class="sr-only" for="q">Search</label>
          <div class="relative">
            <div class="absolute  flex  inset-y-0  items-center  pointer-events-none  ps-4  start-0">
              <Icon class="text-primary-600  size-4" name="magnifying-glass" />
            </div>
            <input
              class="bg-white  border-2  border-primary-100  block  p-4  ps-12   rounded-lg  text-secondary-800  w-full  focus:ring-2  focus:outline-none  focus:ring-tertiary-600"
              id="q"
              minlength="3"
              name="q"
              placeholder="Search recipes..."
              required
              type="text"
            />
            <button
              class="absolute  bg-tertiary-600  bottom-2  cursor-pointer  end-2  px-4  py-3  rounded-lg  text-sm  text-white  hover:bg-tertiary-800"
              type="submit"
            >
              <span data-submitted="false">Search</span>
              <span class="hidden  items-center  space-x-2" data-submitted="true">
                <Icon class="animate-spin" name="spinner-third" /> <span>Searching...</span>
              </span>
            </button>
          </div>
        </form>
      </section>
    </Container>
  </div>
  {blogPosts?.length > 0 && (
    <div class="bg-secondary-50  border-b  border-secondary-100  py-8  sm:py-16">
      <Container>
        <div class="flex  items-baseline  justify-between  mb-8">
          <h2 class="font-light  font-serif  text-2xl  lg:text-3xl">Latest blog posts</h2>
          <a
            class="flex  items-center  justify-end  text-zinc-600  hover:text-zinc-600  hover:underline"
            href="/blog/"
          >
            View all
            <Icon class="ml-1  size-3" name="chevron-right" />
          </a>
        </div>
        <div class="gap-4  grid  lg:gap-8  lg:grid-cols-3">
          {blogPosts.map(async (post) => {
            const { data, id } = post
            const { cover, date, title } = data
            const { remarkPluginFrontmatter } = await render(post)

            return (
              <BlogPostCard
                cover={cover}
                date={date}
                excerpt={remarkPluginFrontmatter.excerpt}
                id={id}
                readingTime={remarkPluginFrontmatter.readingTime}
                title={title}
              />
            )
          })}
        </div>
      </Container>
    </div>
  )}
  <Container>
    <div class="border  border-secondary-100  my-8  p-8  rounded-lg  text-center">
      <h2 class="font-medium  font-serif  mb-4  text-lg">Browse by cuisine&hellip;</h2>
      <ul class="flex  flex-wrap  justify-center  gap-4  text-sm">
        {cuisines.map(({ name, recipes, slug }) => (
          <li>
            <a
              class="bg-secondary-50  border  border-secondary-100  block  px-2  py-1  rounded-md  hover:underline"
              href={slug}
              title={`${recipes.toLocaleString()} Recipe${recipes > 1 ? 's' : ''}`}
            >
              {name}
            </a>
          </li>
        ))}
      </ul>
    </div>
    <div class="border  border-secondary-100  my-8  p-8  rounded-lg  text-center">
      <h2 class="font-medium  font-serif  mb-4  text-lg">Browse by category&hellip;</h2>
      <ul class="flex  flex-wrap  justify-center  gap-4  text-sm">
        {categories.map(({ name, slug }) => (
          <li>
            <a
              class="bg-secondary-50  border  border-secondary-100  block  px-3  py-1  rounded-md  hover:underline"
              href={slug}
            >
              {name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </Container>
  <Benefits />
</Layout>

<script>
  const form = document.getElementById('searchForm');
  const button = form?.querySelector('button[type="submit"]') as HTMLButtonElement | null;
  const buttonTextDefault = button?.querySelector('span[data-submitted="false"]');
  const buttonText = button?.querySelector('span[data-submitted="true"]');

  if (form && button) {
    form.addEventListener('submit', (e) => {
      const input = form.querySelector('input[name="q"]') as HTMLInputElement | null;

      if (!input?.value.trim()) {
        e.preventDefault();

        return;
      }

      button.disabled = true;
      button.classList.remove('cursor-pointer', 'hover:bg-tertiary-800');
      button.classList.add('cursor-not-allowed', 'opacity-80');
      buttonTextDefault?.classList.add('hidden');
      buttonText?.classList.remove('hidden');
      buttonText?.classList.add('flex');
    });
  }
</script>
