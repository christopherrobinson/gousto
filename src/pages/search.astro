---
export const prerender = false;

Astro.response.headers.set('Cache-Control', 'public, max-age=604800, s-maxage=604800');
Astro.response.headers.set('Netlify-Vary', 'query');

import Container from '@/components/Container.astro';
import Pagination from '@/components/Helpers/Pagination.astro';
import RecipeCard from '@/components/RecipeCard.astro';
import Layout from '@/layouts/Default.astro';

const MIN_QUERY_LENGTH = 3;
const { searchParams } = Astro.url;

const selectedCuisine = (searchParams.get('cuisine') || '');
const page = Number(searchParams.get('page') || '1');
const query = searchParams.get('q') || '';
const selectedTime = searchParams.get('time') || '';
const sort = searchParams.get('sort') || '';

let data: any[] | null = [];
let error: string = '';
let cuisines: { label: string; value: string }[] | null = null;
let totalResults = 0;
let totalPages = 0;

if (query && (query.length < MIN_QUERY_LENGTH)) {
  error = `Search query must be at least ${MIN_QUERY_LENGTH} characters long.`;
}

if (!error) {
  const res = await getRecipesFromSupabase({
    query,
    filters: {
      cuisine: selectedCuisine,
      time: selectedTime,
    },
    page,
    sort,
  });

  totalResults = res.total;
  totalPages = Math.ceil(totalResults / recipesPerPage);

  data = res.recipes ?? [];
  cuisines = res.cuisines ?? [];

  error = res.error?.message
    ? String(res.error.message)
    : (data?.length === 0 ? 'No recipes found.' : '');
}

const hasResults = (data && (data.length > 0));
---

<Layout heading="Search">
  <Container>
    <div class="pt-8  w-full">
      <form action="/search/" method="get">
        <div class="flex-1  mb-4  w-full  md:mb-8">
          <label class="sr-only" for="q">Search</label>
          <div class="relative">
            <div class="absolute  flex  inset-y-0  items-center  pointer-events-none  ps-4  start-0">
              <Icon class="text-primary-600  size-4" name="magnifying-glass" />
            </div>
            <input
              class="bg-white  border-2  border-secondary-200  block  p-4  ps-12   rounded-lg  text-secondary-800  w-full  focus:ring-2  focus:outline-none  focus:ring-tertiary-600"
              id="q"
              name="q"
              placeholder="Search recipes..."
              required
              type="search"
              value={query}
            />
            <button
              class="absolute  bg-tertiary-600  bottom-2  cursor-pointer  end-2  px-4  py-3  rounded-lg  text-sm  text-white  hover:bg-tertiary-800"
              type="submit"
            >
              Search
            </button>
          </div>
        </div>
        {(hasResults || selectedCuisine || selectedTime) && (
          <div class="flex  flex-wrap  items-center  mb-4  space-x-4  space-y-2  text-sm  text-secondary-800  md:mb-8  md:space-x-8" id="filters">
            {cuisines && (
              <div class="flex  items-center  space-x-2">
                <label class="font-normal  text-sm" for="cuisine">Cuisine</label>
                <select
                  class="bg-secondary-50  border  border-secondary-300  px-2  py-1  rounded-md"
                  id="cuisine"
                  name="cuisine"
                >
                  <option value="">All cuisines</option>
                  {cuisines.map(({ label, value }) => (
                    <option value={value} selected={selectedCuisine === value}>{label}</option>
                  ))}
                </select>
              </div>
            )}
            <div class="flex  items-center  space-x-2">
              <label class="font-normal text-sm" for="time">Prep Time</label>
              <select
                class="bg-secondary-50  border  border-secondary-300  px-2  py-1 ยง rounded-md"
                id="time"
                name="time"
              >
                <option value="">All prep times</option>
                <option value="15" selected={selectedTime === '15'}>15 minutes or less</option>
                <option value="30" selected={selectedTime === '30'}>30 minutes or less</option>
                <option value="45" selected={selectedTime === '45'}>45 minutes or less</option>
                <option value="60" selected={selectedTime === '60'}>Up to 1 hour</option>
                <option value=">60" selected={selectedTime === '>60'}>Over 1 hour</option>
              </select>
            </div>
            <div class="flex  items-center  ml-auto  space-x-2">
              <label class="font-normal text-sm" for="sort">Sort by</label>
              <select
                class="bg-secondary-50  border  border-secondary-300  px-2  py-1 ยง rounded-md"
                id="sort"
                name="sort"
              >
                <option value="">Default</option>
                <option value="name_asc" selected={sort === 'name_asc'}>Name (A-Z)</option>
                <option value="name_desc" selected={sort === 'name_desc'}>Name (Z-A)</option>
                <option value="rating" selected={sort === 'rating'}>Rating</option>
              </select>
            </div>
          </div>
        )}
      </form>
    </div>
    {hasResults ? (
      <div class="gap-4  grid  pb-8  sm:gap-8  sm:grid-cols-2  md:grid-cols-3  lg:grid-cols-4">
        {data?.map(({ cuisine, image, prep_times, rating, title, url }) => (
          <RecipeCard
            cuisine={cuisine}
            id={url}
            image={image}
            prep_times={prep_times}
            rating={rating}
            title={title}
            />
        ))}
      </div>
    ) : (
      <p class="py-8  text-center">{error}</p>
    )}
  </Container>
  {hasResults && (
    <Pagination
      baseUrl={`/search/`}
      currentPage={page}
      forceQueryString={true}
      totalPages={totalPages}
    />
  )}
</Layout>

<script>
  const attachFilterListeners = () => {
    const form = document.querySelector('form');
    const searchInput = form.querySelector('[name="q"]');
    const filterElements = ['cuisine', 'sort', 'time'].map(name => form.querySelector(`[name="${name}"]`)).filter(Boolean);

    const buildQuery = () => {
      const params = new URLSearchParams();
      const query = searchInput.value.trim();

      if (query)
        params.set('q', query);

      const cuisine = form.querySelector('[name="cuisine"]')?.value;
      if (cuisine)
        params.set('cuisine', cuisine);

      const time = form.querySelector('[name="time"]')?.value;
      if (time)
        params.set('time', time);

      const sort = form.querySelector('[name="sort"]')?.value;
      if (sort)
        params.set('sort', sort);

      return params.toString();
    };


    const submitWithCleanParams = (e) => {
      e.preventDefault();

      const query = buildQuery();
      const path = form.getAttribute('action') || location.pathname;

      window.location.href = `${path}?${query}`;
    };

    filterElements.forEach((el) => el.addEventListener('change', submitWithCleanParams));
    form.addEventListener('submit', submitWithCleanParams);
  };

  document.addEventListener('astro:page-load', attachFilterListeners);
</script>
