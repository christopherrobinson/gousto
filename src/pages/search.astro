---
export const prerender = false;

Astro.response.headers.set('Cache-Control', 'public, max-age=604800, s-maxage=604800');

import Pagination from '@/components/Helpers/Pagination.astro';
import RecipeCard from '@/components/RecipeCard.astro';
import Layout from '@/layouts/Default.astro';

const MIN_QUERY_LENGTH = 3;
const { searchParams } = Astro.url;

const page = Number(searchParams.get('page') || '1');
const query = searchParams.get('q') || '';
const selectedCalories = (searchParams.get('calories') || '');
const selectedCuisine = (searchParams.get('cuisine') || '');
const selectedTime = searchParams.get('time') || '';
const sort = searchParams.get('sort') || '';

let recipes: any[] | null = [];
let cuisines: { label: string; value: string }[] | null = null;
let error: string = '';
let totalResults = 0;
let totalPages = 0;

if (query && (query.length < MIN_QUERY_LENGTH)) {
  error = `Search query must be at least ${MIN_QUERY_LENGTH} characters long.`;
}

if (selectedCuisine) {
  if (!(await isValidCuisine(selectedCuisine))) {
    return Astro.redirect(updateQueryParams(Astro.url, [{ cuisine: false }]));
  }
}

if (!error) {
  const res = await getRecipesFromSupabase({
    query,
    filters: {
      calories: selectedCalories,
      cuisine: selectedCuisine,
      time: selectedTime,
    },
    page,
    sort,
  });

  totalResults = res.total;
  totalPages = Math.ceil(totalResults / recipesPerPage);

  recipes = res.recipes ?? [];
  cuisines = res.cuisines ?? [];

  error = res.error?.message
    ? String(res.error.message)
    : (recipes?.length === 0 ? 'No recipes found.' : '');
}

const hasResults = (recipes && (recipes.length > 0));

if (!hasResults) {
  return Astro.redirect('/search/');
}

const filters = {
  calories: [
    { label: 'Under 600 calories', value: '600' },
    { label: 'Under 800 calories', value: '800' },
    { label: 'Under 1,000 calories', value: '1000' },
    { label: 'Over 1,000 calories', value: '>1000' },
  ],
  prepTimes: [
    { label: 'Under 15 minutes', value: '15' },
    { label: 'Under 30 minutes', value: '30' },
    { label: 'Under 45 minutes', value: '45' },
    { label: 'Under 1 hour', value: '60' },
    { label: 'Over 1 hour', value: '>60' },
  ],
  sort: [
    { label: 'Name (A-Z)', value: 'name_asc' },
    { label: 'Name (Z-A)', value: 'name_desc' },
    { label: 'Rating', value: 'rating' },
    { label: 'Calories', value: 'calories' },
  ],
};
---

<Layout heading="Search">
  <Container>
    <div class="pt-8  w-full">
      <form action="/search/" method="get">
        <div class="flex-1  w-full">
          <label class="sr-only" for="q">Search</label>
          <div class="relative">
            <div class="absolute  flex  inset-y-0  items-center  pointer-events-none  ps-4  start-0">
              <Icon class="text-primary-600  size-4" name="magnifying-glass" />
            </div>
            <input
              class="bg-white  border-2  border-secondary-200  block  p-4  ps-12   rounded-lg  text-secondary-800  w-full  focus:ring-2  focus:outline-none  focus:ring-tertiary-600"
              id="q"
              minlength={MIN_QUERY_LENGTH}
              name="q"
              placeholder="Search recipes..."
              required
              type="search"
              value={query}
            />
            <button
              class="absolute  bg-tertiary-600  bottom-2  cursor-pointer  end-2  px-4  py-3  rounded-lg  text-sm  text-white  hover:bg-tertiary-800"
              type="submit"
            >
              Search
            </button>
          </div>
        </div>
      </form>
    </div>
    <div class="gap-4  grid  lg:gap-8  lg:grid-cols-4  xl:grid-cols-5  print:grid-cols-1">
      <div class="col-span-1  hidden  py-4  lg:block  lg:py-8  print:col-span-1">
        <div class="md:sticky  md:top-[34px]">
          <div class="space-y-8  text-secondary-800">
            <div class="space-y-4">
              <div class="border-secondary-100  border-b  flex  items-center  justify-between  pb-2">
                <h3 class="font-normal">Sort by</h3>
                <div class="flex  items-center  space-x-2">
                  {sort &&
                    <a
                      class="text-primary-600  text-sm  hover:underline"
                      href={updateQueryParams(Astro.url, [{ page: false, sort: false }])}
                    >
                      (reset)
                    </a>
                  }
                  <Icon name="sort" />
                </div>
              </div>
              <div class="text-sm">
                <ul>
                  {filters.sort?.map(({ label, value }) => (
                    <li>
                      <a
                        class={`
                          flex  items-center  justify-between  px-2  py-1  rounded-lg  transition
                          ${sort === value ? 'text-primary-600' : 'hover:bg-secondary-50  hover:text-secondary-950'}
                        `}
                        href={updateQueryParams(Astro.url, [{ page: false, sort: (sort === value  ? false : value) }])}
                      >
                        <span>{label}</span>
                        {sort === value &&
                          <Icon class="text-primary-600" name="check" />
                        }
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            <div class="space-y-4">
              <div class="border-secondary-100  border-b  flex  items-center  justify-between  pb-2">
                <h3 class="font-normal">Filters</h3>
                <div class="flex  items-center  space-x-2">
                  {(selectedCalories || selectedCuisine || selectedTime) &&
                    <a
                      class="text-primary-600  text-sm  hover:underline"
                      href={updateQueryParams(Astro.url, [{ calories: false, cuisine: false, page: false, time: false }])}
                    >
                      (reset)
                    </a>
                  }
                  <Icon name="sliders" />
                </div>
              </div>
              <div class="text-sm">
                <div class="flex  items-center  mb-2  space-x-2">
                  <strong class="block  font-normal">Calories <small class="font-light">(per portion)</small></strong>
                  {(selectedCalories) &&
                    <span class="bg-primary-600  block  rounded-full  size-4  text-center  text-white  text-xs">1</span>
                  }
                </div>
                <div class="max-h-[140px]  overflow-y-scroll  pe-2  scrollbar  scrollbar-track-rounded-full  scrollbar-track-secondary-200  scrollbar-thumb-rounded-full  scrollbar-thumb-secondary-900  scrollbar-w-2">
                  <ul>
                    {filters.calories?.map(({ label, value }) => (
                      <li>
                        <a
                          class={`
                            flex  items-center  justify-between  px-2  py-1  rounded-lg  transition
                            ${selectedCuisine === value ? 'text-primary-600' : 'hover:bg-secondary-50  hover:text-secondary-950'}
                          `}
                          href={updateQueryParams(Astro.url, [{ calories: (selectedCalories === value ? false : value), page: false }])}
                        >
                          <span>{label}</span>
                          {selectedCalories === value &&
                            <Icon class="text-primary-600" name="check" />
                          }
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              <div class="text-sm">
                <div class="flex  items-center  mb-2  space-x-2">
                  <strong class="block  font-normal">Cuisine</strong>
                  {(selectedCuisine) &&
                    <span class="bg-primary-600  block  rounded-full  size-4  text-center  text-white  text-xs">1</span>
                  }
                </div>
                <div class="max-h-[140px]  overflow-y-scroll  pe-2  scrollbar  scrollbar-track-rounded-full  scrollbar-track-secondary-200  scrollbar-thumb-rounded-full  scrollbar-thumb-secondary-900  scrollbar-w-2">
                  <ul>
                    {cuisines?.map(({ label, value }) => (
                      <li>
                        <a
                          class={`
                            flex  items-center  justify-between  px-2  py-1  rounded-lg  transition
                            ${selectedCuisine === value ? 'text-primary-600' : 'hover:bg-secondary-50  hover:text-secondary-950'}
                          `}
                          href={updateQueryParams(Astro.url, [{ cuisine: (selectedCuisine === value ? false : value), page: false }])}
                        >
                          <span>{label}</span>
                          {selectedCuisine === value &&
                            <Icon class="text-primary-600" name="check" />
                          }
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              <div class="text-sm">
                <div class="flex  items-center  mb-2  space-x-2">
                  <strong class="block  font-normal">Prep Time</strong>
                  {(selectedTime) &&
                    <span class="bg-primary-600  block  rounded-full  size-4  text-center  text-white  text-xs">1</span>
                  }
                </div>
                <div class="max-h-[140px]  overflow-y-scroll  pe-2  scrollbar  scrollbar-track-rounded-full  scrollbar-track-secondary-200  scrollbar-thumb-rounded-full  scrollbar-thumb-secondary-900  scrollbar-w-2">
                  <ul>
                    {filters.prepTimes?.map(({ label, value }) => (
                      <li>
                        <a
                          class={`
                            flex  items-center  justify-between  px-2  py-1  rounded-lg  transition
                            ${selectedCuisine === value ? 'text-primary-600' : 'hover:bg-secondary-50  hover:text-secondary-950'}
                          `}
                          href={updateQueryParams(Astro.url, [{ time: (selectedTime === value ? false : value), page: false }])}
                        >
                          <span>{label}</span>
                          {selectedTime === value &&
                            <Icon class="text-primary-600" name="check" />
                          }
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-span-1  lg:col-span-3  xl:col-span-4  print:col-span-1">
        {hasResults ? (
          <div class="gap-4  grid  py-4  xs:grid-cols-2  md:grid-cols-3  lg:grid-cols-4  lg:gap-8  lg:py-8">
            {recipes?.map(({ cuisine, image, nutritional_information, prep_times, rating, title, url }) => (
              <RecipeCard
                cuisine={cuisine}
                id={url}
                image={image}
                nutritional_information={nutritional_information}
                prep_times={prep_times}
                rating={rating}
                title={title}
              />
            ))}
          </div>
        ) : (
          <p class="py-8  text-center">{error}</p>
        )}
        {hasResults && (
          <Pagination
            baseUrl={`/search/`}
            currentPage={page}
            forceQueryString={true}
            total={totalResults}
            totalPages={totalPages}
          />
        )}
      </div>
    </div>
  </Container>
</Layout>
